{"version":3,"sources":["components/Titles.js","components/Weather.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["titles","className","weather","props","show","city","country","Temperature","Humidity","Conditions","error","form","onSubmit","getWeather","type","name","placeholder","API_KEY","App","state","temperature","undefined","e","a","preventDefault","target","value","fetch","api_call","json","data","setState","main","temp","humidity","description","Titles","Form","this","Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAWeA,MATf,WACE,OACE,6BACC,wBAAIC,UAAU,0BAAd,eACA,wBAAKA,UAAU,6BAAf,uDCqBUC,EA1BA,SAACC,GACf,IAAIC,EAAK,KAmBR,OAlBGD,EAAME,MAAMF,EAAMG,UACpBF,EAAM,yBAAKH,UAAU,iBAClB,uBAAGA,UAAU,gBAAb,YACD,0BAAMA,UAAU,kBAAkBE,EAAME,KAAxC,IAA+CF,EAAMG,UAEtD,uBAAGL,UAAU,gBAAb,eACC,0BAAMA,UAAU,kBAAkBE,EAAMI,cAEzC,uBAAGN,UAAU,gBAAb,YACC,0BAAMA,UAAU,kBAAkBE,EAAMK,WAEzC,uBAAGP,UAAU,gBAAb,cACC,0BAAMA,UAAU,kBAAkBE,EAAMM,eAGxCN,EAAMO,QACTN,EAAM,uBAAGH,UAAU,kBAAkBE,EAAMO,QAG1C,6BACCN,ICTWO,MAZf,SAAcR,GACZ,OACE,6BACA,0BAAMS,SAAUT,EAAMU,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SACjD,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,kD,yjBCHF,IAAMC,EAAQ,mCAyDCC,E,2MAvDdC,MAAM,CACCC,iBAAYC,EAClBb,cAASa,EACTZ,gBAAWY,EACXX,WAAMW,G,EAERR,W,uCAAW,WAAMS,GAAN,qBAAAC,EAAA,6DACPD,EAAEE,iBACEnB,EAAKiB,EAAEG,OAAOpB,KAAKqB,MACtBpB,EAAQgB,EAAEG,OAAOnB,QAAQoB,MAHnB,SAIcC,MAAM,qDAAD,OAAsDtB,EAAtD,YAA8DC,EAA9D,kBAA+EW,IAJlG,cAIDW,EAJC,gBAKcA,EAASC,OALvB,OAKGC,EALH,OAMNzB,GAAMC,EACR,EAAKyB,SAAS,CACd1B,KAAKA,EACLC,QAAQA,EACRc,YAAYU,EAAKE,KAAKC,KACtBzB,SAASsB,EAAKE,KAAKE,SACnBzB,WAAWqB,EAAK5B,QAAQ,GAAGiC,YAC3BzB,MAAM,KAGN,EAAKqB,SAAL,KACI,EAAKZ,MADT,CAECT,MAAM,mCAlBC,4C,8HAwBV,OACG,yBAAKT,UAAU,WACf,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,OACd,yBAAKA,UAAU,4BACd,kBAACmC,EAAD,OAED,yBAAKnC,UAAU,2BACf,kBAACoC,EAAD,CAAMxB,WAAYyB,KAAKzB,aACvB,kBAAC0B,EAAD,CAASlC,KAAMiC,KAAKnB,MAAMd,KACzBC,QAASgC,KAAKnB,MAAMb,QACpBC,YAAa+B,KAAKnB,MAAMC,YACxBZ,SAAU8B,KAAKnB,MAAMX,SACrBC,WAAY6B,KAAKnB,MAAMV,WACvBC,MAAO4B,KAAKnB,MAAMT,iB,GA9CR8B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9536841e.chunk.js","sourcesContent":["import React from 'react';\n\nfunction titles() {\n  return (\n    <div>\n     <h1 className=\"title-container__title\">Weather App</h1>\n     <h4  className=\"title-container__subtitle\">Please enter city and country for Weather details</h4>\n     </div>\n  );\n}\n\nexport default titles;\n","import React from 'react';\nconst weather =(props)=>{\n\tlet show=null \n  if(props.city&&props.country){\n\t  show=(<div className=\"weather__info\">\n\t\t  \t\t<p className=\"weather__key\">Location:\n\t\t\t\t\t<span className=\"weather__value\">{props.city},{props.country}</span>\n\t\t\t  </p>\n\t\t\t\t<p className=\"weather__key\">Temperature: \n\t\t\t\t\t<span className=\"weather__value\">{props.Temperature}</span>\n\t\t\t  </p>\n\t\t\t\t<p className=\"weather__key\">Humidity: \n\t\t\t\t\t<span className=\"weather__value\">{props.Humidity}</span>\n\t\t\t  </p>\n\t\t\t\t<p className=\"weather__key\">Conditions: \n\t\t\t\t\t<span className=\"weather__value\">{props.Conditions}</span>\n\t\t\t  </p>\n\t\t  </div>)\n\t}if(props.error){\n\t\tshow=(<p className=\"weather__error\">{props.error}</p>)\n\t}\n  return(\n\t  <div>\n\t  {show}\n\t  </div>\n        )\n    }\nexport default weather;","import React from 'react';\n\nfunction form(props) {\n  return (\n    <div>\n    <form onSubmit={props.getWeather}>\n        <input type='text' name='city' placeholder='Name'/>\n\t\t<input type='text' name='country' placeholder='Country'/>\n\t\t<button>Get Weather</button>\n    </form>\n      </div>\n  );\n}\n\nexport default form;\n","import React,{Component} from 'react';\nimport Titles from './components/Titles';\nimport Weather from './components/Weather';\nimport Form from './components/Form';\n//import './App.css';\nconst API_KEY='2dd81da58f92e3571952d07b65b088e5';\nclass App extends Component{\n\tstate={\n        temperature:undefined,\n\t\tHumidity:undefined,\n\t\tConditions:undefined,\n\t\terror:undefined\n    }\ngetWeather=async(e)=>{\n    e.preventDefault();\n    let city=e.target.city.value;\n\tlet country=e.target.country.value;\n    const api_call=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`)\n        const data=await api_call.json()\n\t\tif(city&&country){\n\t\t\tthis.setState({\n\t\t\tcity:city,\n\t\t\tcountry:country,\n\t\t\ttemperature:data.main.temp,\n\t\t\tHumidity:data.main.humidity,\n\t\t\tConditions:data.weather[0].description,\n\t\t\terror:\"\"\n\t\t})\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\t...this.state,\n\t\t\t\terror:\"Please Enter City And Country\"\n\t\t\t})\n\t\t}\n\t\t\n}\nrender(){\n\treturn (\n    <div className=\"wrapper\">\n\t\t\t <div className=\"main\">\n\t\t\t\t  <div className=\"container\">\n\t\t\t\t\t <div className=\"row\">\n\t\t\t\t\t\t <div className=\"col-xs-5 title-container\">\n\t\t\t\t\t\t \t<Titles/>\n\t\t\t\t\t\t </div>\n\t\t\t\t\t\t <div className=\"col-xs-7 form-container\">\n\t\t\t\t\t\t <Form getWeather={this.getWeather}/>\n\t\t\t\t\t\t <Weather city={this.state.city}\n\t\t\t\t\t\t\t\tcountry={this.state.country}\n\t\t\t\t\t\t\t\tTemperature={this.state.temperature}\n\t\t\t\t\t\t\t\tHumidity={this.state.Humidity} \n\t\t\t\t\t\t\t\tConditions={this.state.Conditions}\n\t\t\t\t\t\t\t\terror={this.state.error}/>\n\t\t\t\t\t\t </div>\n\t\t\t\t\t  </div>\n\t\t\t\t </div>\n\t\t\t</div>\n      </div>\n  );\n}\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}